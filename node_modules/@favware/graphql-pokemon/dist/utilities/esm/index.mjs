var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// utilities/guards.ts
function isMissingNo(pokemon) {
  return pokemon.key === "missingno" /* Missingno */;
}
__name(isMissingNo, "isMissingNo");
function isM00(pokemon) {
  return pokemon.key === "m00" /* M00 */;
}
__name(isM00, "isM00");
function isMissingNoOrM00(pokemon) {
  return isMissingNo(pokemon) || isM00(pokemon);
}
__name(isMissingNoOrM00, "isMissingNoOrM00");
function isCapPokemon(pokemon) {
  return pokemon.num < 0;
}
__name(isCapPokemon, "isCapPokemon");
function isRegularPokemon(pokemon) {
  return pokemon.num > 0;
}
__name(isRegularPokemon, "isRegularPokemon");

// utilities/parseBulbapediaUrl.ts
function parseBulbapediaURL(url) {
  return url.replace(/[ ]/g, "_").replace(/\(/g, "%28").replace(/\)/g, "%29");
}
__name(parseBulbapediaURL, "parseBulbapediaURL");

// utilities/pokemonEnumToSpecies.ts
var megaRegex = /^(?<name>[a-z]+)(?:mega)$/;
var gmaxRegex = /^(?<name>[a-z]+)(?:gmax)$/;
var alolanTotemRegex = /^(?<name>[a-z]+)(?:alolatotem)$/;
var alolanRegex = /^(?<name>[a-z]+)(?:alola)$/;
var hisuianRegex = /^(?<name>[a-z]+)(?:hisui)$/;
var paldeanRegex = /^(?<name>[a-z]+)(?:paldea)$/;
var galarianRegex = /^(?<name>[a-z]+)(?:galar)$/;
var totemRegex = /^(?<name>[a-z]+)(?:totem)$/;
var typeLikeRegex = /^(?<name>(?:arceus|silvally|genesect))(?<type>[a-z]+)?$/;
var pumpkinRegex = /^(?<name>(?:pumpkaboo|gourgeist))(?<size>(?:small|large|super))$/g;
function pokemonEnumToSpecies(pokemon) {
  if (!pokemon) {
    return pokemon;
  }
  switch (pokemon) {
    // Some exclusions that cannot be handled easily by the regex
    case "missingno" /* Missingno */:
      return "MissingNo.";
    case "m00" /* M00 */:
      return "'M (00)";
    case "yanmega" /* Yanmega */:
      return "Yanmega";
    // The double forme Mega Pokemon
    case "charizardmegax" /* Charizardmegax */:
      return "Mega Charizard X";
    case "charizardmegay" /* Charizardmegay */:
      return "Mega Charizard Y";
    case "mewtwomegax" /* Mewtwomegax */:
      return "Mega Mewtwo X";
    case "mewtwomegay" /* Mewtwomegay */:
      return "Mega Mewtwo Y";
    case "venomiconepilogue" /* Venomiconepilogue */:
      return "Venomicon Epilogue";
    // The mimes
    case "mimejr" /* Mimejr */:
      return "Mime Jr.";
    case "mrmime" /* Mrmime */:
      return "Mr. Mime";
    case "mrmimegalar" /* Mrmimegalar */:
      return "Galarian Mr. Mime";
    case "mrrime" /* Mrrime */:
      return "Mr. Rime";
    // The bird that had to have a hyphen in its name
    case "hooh" /* Hooh */:
      return "Ho-Oh";
    // Castform
    case "castformrainy" /* Castformrainy */:
      return "Castform Rainy";
    case "castformsunny" /* Castformsunny */:
      return "Castform Sunny";
    case "castformsnowy" /* Castformsnowy */:
      return "Castform Snowy";
    // Primals
    case "kyogreprimal" /* Kyogreprimal */:
      return "Primal Kyogre";
    case "groudonprimal" /* Groudonprimal */:
      return "Primal Groudon";
    // Deoxys
    case "deoxysattack" /* Deoxysattack */:
      return "Deoxys Attack";
    case "deoxysdefense" /* Deoxysdefense */:
      return "Deoxys Defense";
    case "deoxysspeed" /* Deoxysspeed */:
      return "Deoxys Speed";
    // Wormadam
    case "wormadamsandy" /* Wormadamsandy */:
      return "Wormadam Sandy";
    case "wormadamtrash" /* Wormadamtrash */:
      return "Wormadam Trash";
    // Cherrim
    case "cherrimsunshine" /* Cherrimsunshine */:
      return "Cherrim Sunshine";
    // Porygon hyphen z
    case "porygonz" /* Porygonz */:
      return "Porygon-Z";
    // Rotom forms
    case "rotomheat" /* Rotomheat */:
      return "Rotom Heat";
    case "rotomwash" /* Rotomwash */:
      return "Rotom Wash";
    case "rotomfrost" /* Rotomfrost */:
      return "Rotom Frost";
    case "rotomfan" /* Rotomfan */:
      return "Rotom Fan";
    case "rotommow" /* Rotommow */:
      return "Rotom Mow";
    // Origin forms
    case "giratinaorigin" /* Giratinaorigin */:
      return "Giratina Origin";
    case "dialgaorigin" /* Dialgaorigin */:
      return "Dialga Origin";
    case "palkiaorigin" /* Palkiaorigin */:
      return "Palkia Origin";
    // Shaymin
    case "shayminsky" /* Shayminsky */:
      return "Shaymin Sky";
    // The Basculins
    case "basculinbluestriped" /* Basculinbluestriped */:
      return "Basculin Blue-Striped";
    case "basculegionf" /* Basculegionf */:
      return "basculegion (Female)";
    // The Darmanitans
    case "darmanitanzen" /* Darmanitanzen */:
      return "Darmanitan Zen";
    case "darmanitangalarzen" /* Darmanitangalarzen */:
      return "Galarian Darmanitan Zen";
    // The Frillishes
    case "frillishfemale" /* Frillishfemale */:
      return "Frillish (Female)";
    case "jellicentfemale" /* Jellicentfemale */:
      return "Jellicent (Female)";
    case "tornadustherian" /* Tornadustherian */:
      return "Tornadus Therian";
    case "thundurustherian" /* Thundurustherian */:
      return "Thundurus Therian";
    case "landorustherian" /* Landorustherian */:
      return "Landorus Therian";
    case "kyuremblack" /* Kyuremblack */:
      return "Black Kyurem";
    case "kyuremwhite" /* Kyuremwhite */:
      return "White Kyurem";
    case "keldeoresolute" /* Keldeoresolute */:
      return "Keldeo Resolute Form";
    case "meloettapirouette" /* Meloettapirouette */:
      return "Meloetta Pirouette Forme";
    case "greninjaash" /* Greninjaash */:
      return "Ash Greninja";
    case "vivillonfancy" /* Vivillonfancy */:
      return "Fancy Vivillon";
    case "vivillonpokeball" /* Vivillonpokeball */:
      return "Pokeball Vivillon";
    case "floetteeternal" /* Floetteeternal */:
      return "Eternal Flower Floette";
    case "meowsticf" /* Meowsticf */:
      return "Meowstic (Female)";
    case "aegislashblade" /* Aegislashblade */:
      return "Aegislash Blade Forme";
    case "xerneasneutral" /* Xerneasneutral */:
      return "Xerneas Neutral";
    case "zygarde10" /* Zygarde10 */:
      return "Zygarde 10%";
    case "zygardecomplete" /* Zygardecomplete */:
      return "Zygarde Complete";
    case "hoopaunbound" /* Hoopaunbound */:
      return "Hoopa Unbound";
    case "oricoriopompom" /* Oricoriopompom */:
      return "Oricorio Pompom";
    case "oricoriosensu" /* Oricoriosensu */:
      return "Oricorio Sensu";
    case "oricoriopau" /* Oricoriopau */:
      return "Oricorio Pa'u";
    case "lycanrocmidnight" /* Lycanrocmidnight */:
      return "Midnight Lycanroc";
    case "lycanrocdusk" /* Lycanrocdusk */:
      return "Dusk Lycanroc";
    case "wishiwashischool" /* Wishiwashischool */:
      return "Wishiwashi School";
    case "typenull" /* Typenull */:
      return "Type: Null";
    case "miniormeteor" /* Miniormeteor */:
      return "Minior Meteor";
    case "mimikyubusted" /* Mimikyubusted */:
      return "Mimikyu Busted";
    case "mimikyubustedtotem" /* Mimikyubustedtotem */:
      return "Totem Mimikyu Busted";
    case "jangmoo" /* Jangmoo */:
      return "Jangmo-o";
    case "hakamoo" /* Hakamoo */:
      return "Hakamo-o";
    case "kommoo" /* Kommoo */:
      return "Kommo-o";
    case "kommoototem" /* Kommoototem */:
      return "Totem Kommo-o";
    case "tapukoko" /* Tapukoko */:
      return "Tapu Koko";
    case "tapulele" /* Tapulele */:
      return "Tapu Lele";
    case "tapubulu" /* Tapubulu */:
      return "Tapu Bulu";
    case "tapufini" /* Tapufini */:
      return "Tapu Fini";
    case "necrozmaduskmane" /* Necrozmaduskmane */:
      return "Duskmane Necrozma";
    case "necrozmadawnwings" /* Necrozmadawnwings */:
      return "Dawnwings Necrozma";
    case "necrozmaultra" /* Necrozmaultra */:
      return "Ultra Necrozma";
    case "magearnaoriginal" /* Magearnaoriginal */:
      return "Magearna Original";
    case "cramorantgulping" /* Cramorantgulping */:
      return "Gulping Cramorant";
    case "cramorantgorging" /* Cramorantgorging */:
      return "Gorging Cramorant";
    case "toxtricitylowkey" /* Toxtricitylowkey */:
      return "Low Key Toxtricity";
    case "toxtricitylowkeygmax" /* Toxtricitylowkeygmax */:
      return "G-Max Low Key Toxtricity";
    case "sinisteaantique" /* Sinisteaantique */:
      return "Antique Sinistea";
    case "polteageistantique" /* Polteageistantique */:
      return "Antique Polteageist";
    case "eiscuenoice" /* Eiscuenoice */:
      return "Eiscue Noice";
    case "indeedeef" /* Indeedeef */:
      return "Indeedee (Female)";
    case "morpekohangry" /* Morpekohangry */:
      return "Hangry Morpeko";
    case "zaciancrowned" /* Zaciancrowned */:
      return "Zacian Crowned";
    case "zamazentacrowned" /* Zamazentacrowned */:
      return "Zamazenta Crowned";
    case "eternatuseternamax" /* Eternatuseternamax */:
      return "Eternatus Eternamax";
    case "urshifurapidstrike" /* Urshifurapidstrike */:
      return "Rapid-Strike Urshifu";
    case "urshifurapidstrikegmax" /* Urshifurapidstrikegmax */:
      return "G-Max Rapid-Strike Urshifu";
    case "zarudedada" /* Zarudedada */:
      return "Zarude Dada";
    case "calyrexice" /* Calyrexice */:
      return "Calyrex Ice";
    case "calyrexshadow" /* Calyrexshadow */:
      return "Calyrex Shadow";
    // All the PokeStar Pok√©mon
    case "pokestarsmeargle" /* Pokestarsmeargle */:
      return "Pok\xE9Star Smeargle";
    case "pokestarufo" /* Pokestarufo */:
      return "Pok\xE9Star UFO";
    case "pokestarufo2" /* Pokestarufo2 */:
      return "Pok\xE9Star UFO-2";
    case "pokestarbrycenman" /* Pokestarbrycenman */:
      return "Pok\xE9Star Brycen-Man";
    case "pokestarmt" /* Pokestarmt */:
      return "Pok\xE9Star MT";
    case "pokestarmt2" /* Pokestarmt2 */:
      return "Pok\xE9Star MT2";
    case "pokestartransport" /* Pokestartransport */:
      return "Pok\xE9Star Transport";
    case "pokestargiant" /* Pokestargiant */:
      return "Pok\xE9Star Giant";
    case "pokestarhumanoid" /* Pokestarhumanoid */:
      return "Pok\xE9Star Humanoid";
    case "pokestarmonster" /* Pokestarmonster */:
      return "Pok\xE9Star Monster";
    case "pokestarf00" /* Pokestarf00 */:
      return "Pok\xE9Star F-00";
    case "pokestarf002" /* Pokestarf002 */:
      return "Pok\xE9Star F-002";
    case "pokestarspirit" /* Pokestarspirit */:
      return "Pok\xE9Star Spirit";
    case "pokestarblackdoor" /* Pokestarblackdoor */:
      return "Pok\xE9Star Black Door";
    case "pokestarwhitedoor" /* Pokestarwhitedoor */:
      return "Pok\xE9Star White Door";
    case "pokestarblackbelt" /* Pokestarblackbelt */:
      return "Pok\xE9Star Black Belt";
    case "pokestarufopropu2" /* Pokestarufopropu2 */:
      return "Pok\xE9Star UFO-PropU2";
    // All the Pikachu's
    case "pikachucosplay" /* Pikachucosplay */:
      return "Pikachu Cosplay";
    case "pikachurockstar" /* Pikachurockstar */:
      return "Pikachu Rock Star";
    case "pikachubelle" /* Pikachubelle */:
      return "Pikachu Belle";
    case "pikachupopstar" /* Pikachupopstar */:
      return "Pikachu Pop Star";
    case "pikachuphd" /* Pikachuphd */:
      return "Pikachu PhD";
    case "pikachulibre" /* Pikachulibre */:
      return "Pikachu Libre";
    case "pikachuoriginal" /* Pikachuoriginal */:
      return "Pikachu Kanto Cap";
    case "pikachuhoenn" /* Pikachuhoenn */:
      return "Pikachu Honey Cap";
    case "pikachusinnoh" /* Pikachusinnoh */:
      return "Pikachu Sinnoh Cap";
    case "pikachuunova" /* Pikachuunova */:
      return "Pikachu Novae Cap";
    case "pikachukalos" /* Pikachukalos */:
      return "Pikachu Kalos Cap";
    case "pikachualola" /* Pikachualola */:
      return "Pikachu Alola Cap";
    case "pikachupartner" /* Pikachupartner */:
      return "Pikachu (I Choose You)";
    case "pikachustarter" /* Pikachustarter */:
      return "Pikachu (Let's Go)";
    case "pikachuworld" /* Pikachuworld */:
      return "Pikachu (Journeys)";
    case "pichuspikyeared" /* Pichuspikyeared */:
      return "Spiky Eared Pichu";
    case "eeveestarter" /* Eeveestarter */:
      return "Eevee (Let's Go)";
    // All the Paradox Pok√©mon
    case "greattusk" /* Greattusk */:
      return "Great Tusk";
    case "screamtail" /* Screamtail */:
      return "Scream Tail";
    case "brutebonnet" /* Brutebonnet */:
      return "Brute Bonnet";
    case "fluttermane" /* Fluttermane */:
      return "Flutter Mane";
    case "slitherwing" /* Slitherwing */:
      return "Slither Wing";
    case "sandyshocks" /* Sandyshocks */:
      return "Sandy Shocks";
    case "irontreads" /* Irontreads */:
      return "Iron Treads";
    case "ironbundle" /* Ironbundle */:
      return "Iron Bundle";
    case "ironhands" /* Ironhands */:
      return "Iron Hands";
    case "ironjugulis" /* Ironjugulis */:
      return "Iron Jugulis";
    case "ironmoth" /* Ironmoth */:
      return "Iron Moth";
    case "ironthorns" /* Ironthorns */:
      return "Iron Thorns";
    case "roaringmoon" /* Roaringmoon */:
      return "Roaring Moon";
    case "ironvaliant" /* Ironvaliant */:
      return "Iron Valiant";
    case "walkingwake" /* Walkingwake */:
      return "Walking Wake";
    case "ironleaves" /* Ironleaves */:
      return "Iron Leaves";
    // The Ruination Pok√©mon
    case "wochien" /* Wochien */:
      return "Wo-Chien";
    case "chienpao" /* Chienpao */:
      return "Chien-Pao";
    case "tinglu" /* Tinglu */:
      return "Ting-Lu";
    case "chiyu" /* Chiyu */:
      return "Chi-Yu";
    // Special Paldean Forms
    case "taurospaldeacombat" /* Taurospaldeacombat */:
      return "Paldean Tauros (Combat Breed)";
    case "taurospaldeaaqua" /* Taurospaldeaaqua */:
      return "Paldean Tauros (Aqua Breed)";
    case "taurospaldeablaze" /* Taurospaldeablaze */:
      return "Paldean Tauros (Blaze Breed)";
    // Ogerpon
    case "ogerpon" /* Ogerpon */:
      return "Ogerpon (Teal Mask)";
    case "ogerpontealtera" /* Ogerpontealtera */:
      return "Ogerpon (Teal Mask - Tera)";
    case "ogerponcornerstone" /* Ogerponcornerstone */:
      return "Ogerpon (Cornerstone Mask)";
    case "ogerponcornerstonetera" /* Ogerponcornerstonetera */:
      return "Ogerpon (Cornerstone Mask - Tera)";
    case "ogerponhearthflame" /* Ogerponhearthflame */:
      return "Ogerpon (Hearthflame Mask)";
    case "ogerponhearthflametera" /* Ogerponhearthflametera */:
      return "Ogerpon (Hearthflame Mask - Tera)";
    case "ogerponwellspring" /* Ogerponwellspring */:
      return "Ogerpon (Wellspring Mask)";
    case "ogerponwellspringtera" /* Ogerponwellspringtera */:
      return "Ogerpon (Wellspring Mask - Tera)";
    // Other gen 9 special cases
    case "ursalunabloodmoon" /* Ursalunabloodmoon */:
      return "Ursaluna Bloodmoion";
    case "poltchageistartisan" /* Poltchageistartisan */:
      return "Poltchageist Artisan";
    case "sinistchamasterpiece" /* Sinistchamasterpiece */:
      return "Sinistcha Masterpiece";
    // All other cases
    default: {
      const megaResult = megaRegex.exec(pokemon);
      if (megaResult && megaResult.groups?.name) {
        return `Mega ${toTitleCase(megaResult.groups.name)}`;
      }
      const gmaxResult = gmaxRegex.exec(pokemon);
      if (gmaxResult && gmaxResult.groups?.name) {
        return `G-Max ${toTitleCase(gmaxResult.groups.name)}`;
      }
      const alolanTotemResult = alolanTotemRegex.exec(pokemon);
      if (alolanTotemResult && alolanTotemResult.groups?.name) {
        return `Alolan Totem ${toTitleCase(alolanTotemResult.groups.name)}`;
      }
      const totemResult = totemRegex.exec(pokemon);
      if (totemResult && totemResult.groups?.name) {
        return `Totem ${toTitleCase(totemResult.groups.name)}`;
      }
      const alolanResult = alolanRegex.exec(pokemon);
      if (alolanResult && alolanResult.groups?.name) {
        return `Alolan ${toTitleCase(alolanResult.groups.name)}`;
      }
      const galarianResult = galarianRegex.exec(pokemon);
      if (galarianResult && galarianResult.groups?.name) {
        return `Galarian ${toTitleCase(galarianResult.groups.name)}`;
      }
      const hisuianResult = hisuianRegex.exec(pokemon);
      if (hisuianResult && hisuianResult.groups?.name) {
        return `Hisuian ${toTitleCase(hisuianResult.groups.name)}`;
      }
      const paldeanResult = paldeanRegex.exec(pokemon);
      if (paldeanResult && paldeanResult.groups?.name) {
        return `Paldean ${toTitleCase(paldeanResult.groups.name)}`;
      }
      const typeLikeResult = typeLikeRegex.exec(pokemon);
      if (typeLikeResult && typeLikeResult.groups?.name && typeLikeResult.groups?.type) {
        return `${toTitleCase(typeLikeResult.groups.name)} ${toTitleCase(typeLikeResult.groups.type)}`;
      }
      const pumpkinResult = pumpkinRegex.exec(pokemon);
      if (pumpkinResult && pumpkinResult.groups?.name && pumpkinResult.groups?.size) {
        return `${toTitleCase(pumpkinResult.groups.name)} ${toTitleCase(pumpkinResult.groups.size)}`;
      }
      return toTitleCase(pokemon);
    }
  }
}
__name(pokemonEnumToSpecies, "pokemonEnumToSpecies");
var TO_TITLE_CASE = /[A-Za-z√Ä-√ñ√ò-√∂√∏-√ø]\S*/g;
function toTitleCase(str) {
  return str.replace(TO_TITLE_CASE, (txt) => {
    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();
  });
}
__name(toTitleCase, "toTitleCase");

// utilities/resolveBulbapediaUrl.ts
function resolveBulbapediaURL(pokemon) {
  if (isCapPokemon(pokemon)) throw new RangeError("This function does not work for CAP or Pok\xE9Star Pok\xE9mon.");
  return isMissingNo(pokemon) ? "https://bulbapedia.bulbagarden.net/wiki/MissingNo." : isM00(pokemon) ? "https://bulbapedia.bulbagarden.net/wiki/'M_(00)" : parseBulbapediaURL(pokemon.bulbapediaPage);
}
__name(resolveBulbapediaURL, "resolveBulbapediaURL");

// utilities/resolveColor.ts
function resolveColor(colorOrPokemon) {
  if (typeof colorOrPokemon !== "string") colorOrPokemon = colorOrPokemon.color;
  switch (colorOrPokemon) {
    case "Black":
      return 3289650;
    case "Blue":
      return 2456831;
    case "Brown":
      return 10702874;
    case "Gray":
      return 9868950;
    case "Green":
      return 4128590;
    case "Pink":
      return 16737701;
    case "Purple":
      return 10894824;
    case "Red":
      return 16724530;
    case "White":
      return 14803425;
    case "Yellow":
      return 16773977;
    default:
      return 0;
  }
}
__name(resolveColor, "resolveColor");

// utilities/resolveSerebiiUrl.ts
function resolveSerebiiUrl(pokemon) {
  if (isCapPokemon(pokemon)) throw new RangeError("This function does not work for CAP or Pok\xE9Star Pok\xE9mon.");
  return isMissingNoOrM00(pokemon) ? "https://www.serebii.net/pokedex/000.shtml" : pokemon.serebiiPage;
}
__name(resolveSerebiiUrl, "resolveSerebiiUrl");

export { isCapPokemon, isM00, isMissingNo, isMissingNoOrM00, isRegularPokemon, parseBulbapediaURL, pokemonEnumToSpecies, resolveBulbapediaURL, resolveColor, resolveSerebiiUrl };
//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map